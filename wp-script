#!/bin/bash
# by Perseus
# wp cli program for deleting duplicated Wordpress pending posts and then publishing them
# NOTICE: Take a database backup of your Wordpress before you use it!!!
# To automate enable silent mode and put in crontab like that (every 6 hours): 0 */6 * * * /path/to/wp-script --commit >/dev/null 2>/path/to/wp-script-errors.log
#  If you set too short intervals in crontab wp-script will automatically delay the new execution if the previous has not finished yet, until it does.
# Parameter explanation:
#  --show     Shows the pending posts and the duplicated pending posts (if they exist)
#  --commit   Deletes duplicated pending posts, replaces specified strings (optional) and publishes them in time intervals
#  --delpub   Deletes duplicated published posts

# Changelog:
# - Added check to know if wp-script is already running to prevent any possible conflict by being executed multiple times. Can be bypassed manually.
# - Added minimum_time variable to set the minimum time threshold when random_time is set to true.
# - Changed the way it publishes. Now it won't publish any extra pending posts added while it's commiting.
# - Minor optimization fixes.
# - Same day update with further optimization and some minor bug fixes.


# --- EDIT BELOW ---
# Set the path of wp cli program
wp_path="/usr/local/bin/wp"
# Set the path of a wordpress site
wordpress_path="/path/to/your/wordpress"
# Simulation mode. Pretends it deletes duplicates, publishes or search and replacing (if enabled). Switch to false to actually perform the tasks.
simulate=false
# Set the interval time in minutes for publishing between posts to avoid spam
publish_time=50
# Set if you want the interval time to be fixed or with a random value from minimum time (below setting) to publish_time
random_time=true
# If you have set random_time to true then set here the minimum time threshold in minutes. publish_time must be always higher than this
minimum_time=10
# Set to true if you want to automate without asking for confirmations (i.e before publishing)
silent=true

# Advanced Settings
# Search and Replace functionality. It will replace strings from wp_posts, wp_postmeta and wp_terms tables
# Enable it if you want and edit/add search and replace strings.
search_replace=true
declare -A replace
# You can add as many strings you wish to search and replace in the array below with the following format:
# array  search  replace
replace["&apos;"]="'"
replace["&amp;"]="&"
replace["&#039;"]="'"
replace["&quest;"]="?"

# --- DO NOT EDIT BELOW ---

# Error handling
[ -z "$(command -v $wp_path)" ] && echo "Error. wp path not found or not an executable program." && exit 1
[ ! -d "$wordpress_path" ] && echo "Error. Wordpress path not found." && exit 1
[ "$random_time" = true ] && [ -z "$(which shuf)" ] && echo "Error. shuf program not found and is required for random time. Set random_time to false or install shuf and retry." && exit 1
[ -z "$1" ] && echo "Required parameter: --show or --commit or --delpub." && exit 1

# Activating and announcing simulation mode
[ "$simulate" = true ] && echo "Running in Simulation mode." && dry="--dry-run"

# Announcing silent mode
[ "$silent" = true ] && echo "Silent mode is ON."

# Function that deletes pending or published duplicated posts
delete_duplicates() {
 echo
 status="$1"
 [ "$status" = "published" ] && status="publish"
 if [ "$silent" != true ]; then
  read -rp "Are you sure you want to delete the duplicated $post_status posts? (y/n):" "del_dupes"
  [ "$del_dupes" != "y" ] && echo "Aborting deletion of the duplicated $post_status posts. Exiting." && exit 0
 fi
 if [ "$simulate" = true ]; then
  echo "Duplication deletion skipped because of simulation mode."
 else
  "$wp_path" --path="$wordpress_path" db query "
   DELETE a.*
    FROM wp_posts AS a
      INNER JOIN (
         SELECT post_title, MIN( id ) AS min_id
         FROM wp_posts
         WHERE post_type = 'post'
         AND post_status = '$status'
         GROUP BY post_title
         HAVING COUNT( * ) > 1
      ) AS b ON b.post_title = a.post_title
    AND b.min_id <> a.id
    AND a.post_type = 'post'
    AND a.post_status = '$status'
  "
  [ "$?" != "0" ] && echo "Error. wp returned an unknown error. Exiting immediately." && exit 1
  echo "Done."
 fi
}

# Function that shows pending or published duplicated posts
show_duplicates() {
 echo
 status="$1"
 [ "$status" = "published" ] && status="publish"
 "$wp_path" --path="$wordpress_path" db query "
  SELECT a.ID, a.post_title, a.post_type, a.post_status
   FROM wp_posts AS a
     INNER JOIN (
        SELECT post_title, MIN( id ) AS min_id
        FROM wp_posts
        WHERE post_type = 'post'
        AND post_status = '$status'
        GROUP BY post_title
        HAVING COUNT( * ) > 1
     ) AS b ON b.post_title = a.post_title
   AND b.min_id <> a.id
   AND a.post_type = 'post'
   AND a.post_status = '$status'
 "
 [ "$?" != "0" ] && echo "Error. wp returned an unknown error. Exiting immediately." && exit 1
}

# Function for duplicates precheck. Calls delete_duplicates()
check_duplicates() {
 echo
 post_status="$1"
 dupes_action="$2"
 if [ "$post_status" != "pending" ] && [ "$post_status" != "published" ]; then
  echo "Error. post_status variable is not defined correctly. Exiting." && exit 1
 fi
 dupes=$(show_duplicates "$post_status")
 if [ -z "$dupes" ]; then
  echo "No duplicated $post_status posts found. OK!"
 else
  echo "Showing duplicated $post_status posts:" && show_duplicates "$post_status"
  [ "$dupes_action" = "commit" ] && echo "Deleting duplicated $post_status posts..." && delete_duplicates "$post_status"
 fi
}

# Function that lists pending posts
list_pending() {
 [ -z "$1" ] && echo && echo "Showing pending posts:" || ids="--format=ids"
 "$wp_path" --path="$wordpress_path" post list --post_status=pending --post_type=post $ids
 [ "$?" != "0" ] && echo "Error. wp returned an unknown error. Exiting immediately." && exit 1
}

# Function checks if there are pending posts
check_pending() {
 echo
 echo "Checking for pending posts..."
 pending=$(list_pending ids)
 [ -z "$pending" ] && echo "No pending posts." && exit 0
}

# Function that publishes pending posts
publish_pending() {
 echo
 if [ "$silent" != true ]; then
  read -rp "Publish pending posts? (y/n):" "publish"
  echo
  [ "$publish" != "y" ] && echo "Aborting publishing. Exiting." && exit 0 || echo "Publishing pending posts:"
 fi
 count=0
 pending_ids=($(list_pending ids))
 for post_id in "${pending_ids[@]}"; do
  let count=count+1
  if [ "$random_time" = true ]; then
   timer=$(shuf -i${minimum_time}-${publish_time} -n1)
  else
   timer=$publish_time
  fi
  [ $count -ne 1 ] && echo "Will publish the next one in $timer minutes..." && sleep ${timer}m
  [ "$simulate" = true ] && echo -e "Publishing pending posts skipped because of simulation mode.\nPost ID $post_id would have normally be posted." ||
   "$wp_path" --path="$wordpress_path" post update $post_id --post_status=publish
  [ "$?" != "0" ] && echo "Error. wp returned an unknown error. Exiting immediately." && exit 1
 done
 echo "Done."
}

# Function to search and replace strings in database
search_and_replace() {
 echo
 for i in "${!replace[@]}"; do
  echo "Searching for: $i and replacing with: ${replace[$i]}..."
  "$wp_path" --path="$wordpress_path" search-replace "$i" "${replace[$i]}" wp_posts wp_postmeta wp_terms $dry
  [ "$?" != "0" ] && echo "Error. wp returned an unknown error. Exiting immediately." && exit 1
 done
 echo "Done."
}

# Function to prevent script from running again if already running
check_run() {
 echo
 while true; do
  [ ! -f ".wp-script.lock" ] && break
  echo "wp-script found already running or not finished previously properly."
  echo "To clear previously created pseudo pid to pass this check type: rm .wp-script.lock"
  if [ "$silent" = false ]; then
   read -rp "Do you want to run it again anyway? (y/n):" "rerun"
  fi
  [ "$rerun" = "y" ] && break
  echo "Entering auto wait loop with 1 minute intervals..."
  sleep 1m
 done
}

# Function to create/remove pseudo pid
pseudo_pid() {
 [ "$1" = "create" ] && [ ! -f ".wp-script.lock" ] && touch .wp-script.lock
 [ "$1" = "remove" ] && [ -f ".wp-script.lock" ] && rm .wp-script.lock
}

# Gets the parameter and executes the appropriate task
show=$(grep "^\-\-show" <<<"$1")
commit=$(grep "^\-\-commit" <<<"$1")
delpub=$(grep "^\-\-delpub" <<<"$1")

if [ ! -z "$show" ]; then
 check_pending
 list_pending
 check_duplicates pending show
elif [ ! -z "$commit" ]; then
 check_run
 pseudo_pid create
 check_pending
 [ "$search_replace" = true ] && search_and_replace
 check_duplicates pending commit
 list_pending
 publish_pending
elif [ ! -z "$delpub" ]; then
 check_run
 pseudo_pid create
 check_duplicates published commit
else
 echo "Wrong syntax. Required parameter: --show or --commit or --delpub."
fi

# Removes pseudo pid at exit
pseudo_pid remove
